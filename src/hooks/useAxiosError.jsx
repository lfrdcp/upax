/**
 * ## Custom Hook to handle the errors
 * Handle the errors of an axios request, assign them to the snackbar object
 *
 * @module useAxiosError
 * @version 1.0
 * @author Alfredo Casta√±eda Porcayo <alfredocaspor1997@gmail.com>
 *
 * @param {function} setSnackbar Assign values to the snackbar
 *
 * @example const { checkError } = useAxiosError({ setSnackbar });
 */

const useAxiosError = ({ setSnackbar }) => {
  /**
   * @summary Make a request, setter progress bar, validation in case of error and use dynamic success method
   * @memberof module:useAxiosError
   *
   * @param {Object} e Error generated by axios request
   * @param {Object} errors Error message object
   * @example checkError(e, errors);
   */
  const checkError = (e, errors) => {
    let message = errors.eUn;
    let status = e.response.status;
    status === 400
      ? (message = errors.e400)
      : status === 404
      ? (message = errors.e404)
      : status === 500 && (message = errors.e500);

    setSnackbar({
      openX: true,
      messageX: message,
      typeX: 'warning',
    });
  };

  return { checkError };
};

export default useAxiosError;
